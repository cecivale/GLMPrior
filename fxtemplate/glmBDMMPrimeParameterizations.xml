<beast version='2.0'
       namespace='beast.base.core
                 :beast.base.evolution.branchratemodel
                 :beast.base.evolution.speciation
                 :beast.base.evolution.tree.coalescent
                 :beast.base.util
                 :beast.base.evolution.nuc
                 :beast.base.evolution.operator
                 :beast.base.evolution.sitemodel
                 :beast.base.evolution.substitutionmodel
                 :beast.base.evolution.likelihood
                 :beast.base.evolution
                 :beast.base.inference.parameter
                 :beast.base.inference.distributions
                 :beast.base.evolution.operator.kernel'>

    <mergewith point='misc'>
        <fragment id='GLMCanonicalBDMMPrimeParameters' spec="beastfx.app.beauti.Fragment">
            <![CDATA[

            <distribution spec="bdmmprime.util.priors.ZeroExcludingPrior" id='$(thisparam)GLMCanonicalPrior.t:$(n)' x='@$(thisparam)GLMCanonical.t:$(n)'>
                   <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>
  		    <operator id='$(thisparam)GLMCanonicalScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@$(thisparam)GLMCanonical.t:$(n)"/>

  		    <distribution spec="bdmmprime.util.priors.SmartZeroExcludingPrior" id='$(thisparam)GLMCanonicalPriorSmart.t:$(n)' x='@$(thisparam)GLMCanonical.t:$(n)'>
                   <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>
  		    <operator id='$(thisparam)GLMCanonicalScalerSmart.t:$(n)' spec='bdmmprime.util.operators.SmartScaleOperator' scaleFactor="0.75" weight="3" parameter="@$(thisparam)GLMCanonical.t:$(n)"/>
            ]]>

            <connect srcID='$(thisparam)GLMCanonical.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)GLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=false'/>

            <connect srcID='$(thisparam)GLMCanonicalPrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)GLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/linkIdenticalValues=false
                     and $(thisparam)GLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=false'/>

            <connect srcID='$(thisparam)GLMCanonicalScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)GLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/linkIdenticalValues=false
                     and $(thisparam)GLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=false'/>

            <connect srcID='$(thisparam)GLMCanonicalPriorSmart.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)GLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/linkIdenticalValues=true
                     and $(thisparam)GLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=false'/>

            <connect srcID='$(thisparam)GLMCanonicalScalerSmart.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)GLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/linkIdenticalValues=true
                     and $(thisparam)GLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=false'/>
        </fragment>

        <fragment id="GLMCanonicalBDMMPrimeSkylineLoggers" spec="beastfx.app.beauti.Fragment">
            <connect srcID='$(thisparam)SPGLMCanonical.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)SPGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)GLMCanonical.t:$(n)/estimate=true'/>
        </fragment>

        <fragment id="GLMCanonicalBDMMPrimeCoefficients" spec="beastfx.app.beauti.Fragment">
            <![CDATA[
<!--            <param id="$(thisparam)CoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>-->
            <distribution spec="bdmmprime.util.priors.ZeroExcludingPrior" id='$(thisparam)GLMCoefficientsCanonicalPrior.t:$(n)' x='@$(thisparam)CoefficientsGLMCanonical.t:$(n)'>
                   <distr spec="beast.base.inference.distribution.OneOnX"/>
            </distribution>
            <operator id="$(thisparam)GLMCoefficientsCanonicalScaler.t:$(n)" spec="BactrianRandomWalkOperator" parameter="@$(thisparam)CoefficientsGLMCanonical.t:$(n)"
                weight="3.0" scaleFactor="0.5"/>
]]>

            <connect srcID='$(thisparam)CoefficientsGLMCanonical.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCoefficientsCanonicalPrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)CoefficientsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCoefficientsCanonicalScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)CoefficientsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>
        </fragment>

        <fragment id="GLMCanonicalBDMMPrimeIndicators" spec="beastfx.app.beauti.Fragment">
            <![CDATA[
<!--            <param id="$(thisparam)IndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" estimate="false"/>-->
            <operator id="$(thisparam)GLMCanonicalIndicatorsFlip.t:$(n)" spec="BitFlipOperator" parameter="@$(thisparam)IndicatorsGLMCanonical.t:$(n)" weight="3.0" uniform="false" />
            <operator id="$(thisparam)GLMCanonicalIndicatorSwap.t:$(n)" spec="glmprior.util.ExtendedSwapOperator" parameter="@$(thisparam)CoefficientsGLMCanonical.t:$(n)" filter="@$(thisparam)IndicatorsGLMCanonical.t:$(n)" weight="3.0"/>
            <operator id="$(thisparam)GLMCanonicalJointSwap.t:$(n)" spec="JointOperator" weight="3.0">
                <operator id="$(thisparam)GLMCanonicalJointCoefficientSwap.t:$(n)" spec="glmprior.util.ExtendedSwapOperator" boolparameter="@$(thisparam)IndicatorsGLMCanonical.t:$(n)" weight="5.0" />
                <operator id="$(thisparam)GLMCanonicalJointIndicatorSwap.t:$(n)" spec="glmprior.util.ExtendedSwapOperator" parameter="@$(thisparam)CoefficientsGLMCanonical.t:$(n)" weight="5.0"/>
            </operator>
]]>

            <connect srcID='$(thisparam)IndicatorsGLMCanonical.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)IndicatorsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalIndicatorsFlip.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)IndicatorsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)IndicatorsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalIndicatorSwap.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)IndicatorsGLMCanonical.t:$(n))
                     and inposterior($(thisparam)CoefficientsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)IndicatorsGLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalJointSwap.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)IndicatorsGLMCanonical.t:$(n))
                     and inposterior($(thisparam)CoefficientsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)IndicatorsGLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalJointCoefficientSwap.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)IndicatorsGLMCanonical.t:$(n))
                     and inposterior($(thisparam)CoefficientsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)IndicatorsGLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalJointIndicatorSwap.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior($(thisparam)IndicatorsGLMCanonical.t:$(n))
                     and inposterior($(thisparam)CoefficientsGLMCanonical.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)IndicatorsGLMCanonical.t:$(n)/estimate=true
                     and $(thisparam)CoefficientsGLMCanonical.t:$(n)/estimate=true'/>
        </fragment>

        <fragment id="GLMCanonicalBDMMPrimeErrors" spec="beastfx.app.beauti.Fragment">
            <![CDATA[
<!--            <param id="$(thisparam)ErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" estimate="true"/>-->
            <prior name="distribution" id='$(thisparam)GLMCanonicalErrorsPrior.t:$(n)' x='@$(thisparam)ErrorsGLMCanonical.t:$(n)'>
                   <distr spec="beast.base.inference.distribution.Exponential" mean="0.001"/>
            </prior>
            <operator id='$(thisparam)GLMCanonicalErrorsScaler.t:$(n)' spec='BactrianScaleOperator' scaleFactor="0.75" weight="3" upper="20.0" parameter="@$(thisparam)ErrorsGLMCanonical.t:$(n)"/>
            ]]>

            <connect srcID='$(thisparam)ErrorsGLMCanonical.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                     and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                     and $(thisparam)ErrorsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalErrorsPrior.t:$(n)' targetID='prior' inputName='distribution'
                        if='inposterior(BDMMPrime.t:$(n))
                        and inposterior(Tree.t:$(n))
                        and inposterior($(thisparam)ErrorsGLMCanonical.t:$(n))
                        and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                        and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                        and $(thisparam)ErrorsGLMCanonical.t:$(n)/estimate=true'/>

            <connect srcID='$(thisparam)GLMCanonicalErrorsScaler.t:$(n)' targetID='mcmc' inputName='operator'
                        if='inposterior(BDMMPrime.t:$(n))
                        and inposterior(Tree.t:$(n))
                        and inposterior($(thisparam)ErrorsGLMCanonical.t:$(n))
                        and inposterior(GLMCanonicalBDMMPrimeParameterization.t:$(n))
                        and $(thisparam)SPGLMCanonical.t:$(n)/isGLM=true
                        and $(thisparam)ErrorsGLMCanonical.t:$(n)/estimate=true'/>
        </fragment>
    </mergewith>

    <mergewith point='treePriorTemplates'>

        <!-- Canonical parameterization -->
        <subtemplate id="GLMCanonicalParameterization" class="glmprior.parameterization.GLMCanonicalParameterization"
                     suppressInputs="glmprior.parameterization.GLMCanonicalParameterization.typeSet"
                     mainid="GLMCanonicalBDMMPrimeParameterization.t:$(n)">

        <![CDATA[
            <parameterization id="GLMCanonicalBDMMPrimeParameterization.t:$(n)"
                        spec="glmprior.parameterization.GLMCanonicalParameterization">
                        <processLength idref="originBDMMPrime.t:$(n)"/>
                        <typeSet idref="typeSetBDMMPrime.t:$(n)"/>
                        <birthRate id="birthRateSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMSkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true" isGLM="false">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="birthRateGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0"/>
                        </birthRate>
                        <birthRateAmongDemes id="birthRateAmongDemesSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMSkylineMatrixParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="birthRateAmongDemesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" lower="0.0"/>
                        </birthRateAmongDemes>
                        <deathRate id="deathRateSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMSkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="deathRateGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0"/>
                        </deathRate>
                        <migrationRate id="migrationRateSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMSkylineMatrixParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="migrationRateGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0"/>
                        </migrationRate>

                        <samplingRate id="samplingRateSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMSkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="samplingRateGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.1" lower="0.0"/>
                        </samplingRate>
                        <removalProb id="removalProbSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMSkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="removalProbGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" upper="1.0" estimate="false"/>
                        </removalProb>

                        <rhoSampling id="rhoSamplingProbSPGLMCanonical.t:$(n)" spec="glmprior.parameterization.GLMTimedParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                        </rhoSampling>
            </parameterization>

            <param id="birthRateChangeTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
            <param id="birthRateAmongDemesChangeTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
            <param id="deathRateChangeTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
            <param id="migrationRateChangeTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
            <param id="samplingRateChangeTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
            <param id="removalProbChangeTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>

            <param id="birthRateIndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" dimension="2" estimate="true"/>
            <param id="birthRateCoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" dimension="2" estimate="false"/>
            <param id="birthRateErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" dimension="2" estimate="false"/>

            <param id="deathRateIndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" dimension="2" estimate="true"/>
            <param id="deathRateCoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" dimension="2" lower="0.0" estimate="false"/>
            <param id="deathRateErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" dimension="2" estimate="false"/>

            <param id="migrationRateIndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" dimension="2" estimate="true"/>
            <param id="migrationRateCoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" dimension="2" lower="0.0" estimate="false"/>
            <param id="migrationRateErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" dimension="2" estimate="false"/>

            <param id="samplingRateIndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" dimension="2" estimate="true"/>
            <param id="samplingRateCoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0"  lower="0.0" dimension="2" estimate="false"/>
            <param id="samplingRateErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" dimension="2" estimate="false"/>

            <param id="removalProbIndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" dimension="2" estimate="true"/>
            <param id="removalProbCoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0"  lower="0.0" dimension="2" estimate="false"/>
            <param id="removalProbErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" dimension="2"   estimate="false"/>


            <param id="rhoSamplingProbGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" estimate="false"/>
            <param id="rhoSamplingProbTimesGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" estimate="false"/>

            <param id="rhoSamplingProbIndicatorsGLMCanonical.t:$(n)" spec="BooleanParameter" name="indicators" value="1" dimension="2" estimate="true"/>
            <param id="rhoSamplingProbCoefficientsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0"  lower="0.0" dimension="2" estimate="false"/>
            <param id="rhoSamplingProbErrorsGLMCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.01" lower="0.0" dimension="2" estimate="false"/>
        ]]>
            <plate fragment="GLMCanonicalBDMMPrimeParameters" var="thisparam"
                   range="birthRate,birthRateAmongDemes,deathRate,migrationRate,samplingRate,removalProb,rhoSamplingProb"/>
            <plate fragment="GLMCanonicalBDMMPrimeParameters" var="thisparam"
                   range="birthRateChangeTimes,birthRateAmongDemesChangeTimes,deathRateChangeTimes,migrationRateChangeTimes,samplingRateChangeTimes,removalProbChangeTimes,rhoSamplingProbTimes"/>
            <plate fragment="GLMCanonicalBDMMPrimeSkylineLoggers" var="thisparam"
                   range="birthRate,birthRateAmongDemes,deathRate,migrationRate,samplingRate,removalProb,rhoSamplingProb"/>
            <plate fragment="GLMCanonicalBDMMPrimeCoefficients" var="thisparam"
                    range="birthRate,deathRate,migrationRate,samplingRate,removalProb,rhoSamplingProb"/>
            <plate fragment="GLMCanonicalBDMMPrimeIndicators" var="thisparam"
                    range="birthRate,deathRate,migrationRate,samplingRate,removalProb,rhoSamplingProb"/>
            <plate fragment="GLMCanonicalBDMMPrimeErrors" var="thisparam"
                    range="birthRate,deathRate,migrationRate,samplingRate,removalProb,rhoSamplingProb"/>

        </subtemplate>

     </mergewith>

</beast>
